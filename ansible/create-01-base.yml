---
- hosts: all
  remote_user: root
  gather_facts: false
  tasks:
    - set_fact:
        rhsm_username: "{{ rhsm_username }}"
        rhsm_password: "{{ rhsm_password }}"
      tags:
        - always
    - debug: var=vm_nics
      tags:
        - always
    # - debug: msg={{ vm_nics }}
    #   tags:
    #     - always

  vars_prompt:
    - name: "rhsm_username"
      prompt: "what is your Red Hat Subscription Manager username?"
      default: "wrichter"
      private: no
    - name: "rhsm_password"
      prompt: "what is your Red Hat Subscription Manager password?"
      private: yes

- hosts: cloudforms-osp
  remote_user: root
  gather_facts: false
  # DONE: this is ugly as we first have to look for running OSP and running CFME, before we should continue here to avoid unneeded --skip-tags and --tags
  tasks:
    - name: check if openstack is available
      shell: curl -k {% if current_lifecycle_env.osp_use_tls %}https{% else %}http{% endif %}://{{ hostvars['openstack'].vm_nics[0].ip }}/ || true
      register: openstack_available
      changed_when: false
      delegate_to: "{{ infrastructure_delegate_host_used_to_test_if_layer2_host_is_available }}"
      tags:
        - cfme_on_osp
    - block:
        - include: roles/layer3_vm_on_openstack/tasks/set_floating_ip_as_fact.yml
        - include: roles/layer3_vm_on_openstack/tasks/set_vm_nics_facts.yml
        - debug: var=vm_nics
    when: openstack_available.stdout|length > 0

- hosts: layer1
  remote_user: root
  gather_facts: false
  pre_tasks:
    - setup:
      tags: [ 'layer1', 'rhosp', 'rhev', 'ose3', 'dnat' ]
  roles:
    - role: layer1
      tags: [ 'layer1' ]
      mode: create
    - role: layer1_dnat
      tags: [ 'layer1', 'dnat' ]
      mode: create
    - role: layer1_ceph_inventory
      tags: [ 'layer2', 'ceph', 'ipa' ]
      when: current_lifecycle_env.osp_storage_backend == "ceph_ownvms"

#### SATELLITE ####

- hosts: satellite
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'satellite', 'vm' ], mode: create }
    - { role: layer2_rhel, tags: [ 'layer2','satellite', 'rhel' ], mode: create }
    - { role: layer2_satellite, tags: [ 'layer2','satellite' ], mode: create }

# - hosts: test-rhel
#   remote_user: root
#   gather_facts: false
#   roles:
#     - { role: layer2_vms, tags: [ 'layer2', 'satellite', 'vm', 'test-rhel' ], mode: create }
#     - { role: layer2_rhel, tags: [ 'layer2', 'satellite', 'rhel', 'test-rhel' ], mode: create }

#### IPA ####

- hosts: ipa
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'ipa', 'vm' ], mode: create }
    - { role: layer2_ipa_etc_hosts, tags: [ 'layer2', 'ipa', 'rhel' ], mode: create }
    - { role: layer2_rhel, tags: [ 'layer2', 'ipa', 'rhel' ], mode: create }
    - { role: layer2_ipa_etc_hosts, tags: [ 'layer2', 'ipa', 'rhel' ], mode: destroy }
    - { role: layer2_ipa, tags: [ 'layer2', 'ipa' ], mode: create }
    - { role: layer2_tdagent, tags: [ 'layer2', 'ipa', 'tdagent'], mode: create }
    #- { role: layer2_ipa_openssl_ca, tags: [ 'layer2', 'ipa', 'ca' ], mode: create }

#### SATELLITE (again) ####

- hosts: satellite
  remote_user: root
  gather_facts: false
  #pre_tasks:
  #  - setup:
  #    tags: [ 'layer2','satellite' ]
  roles:
   - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'satellite', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
   - { role: layer2_tdagent, tags: [ 'layer2', 'satellite', 'tdagent' ], mode: create }
#   - { role: layer2_ipa_certificate, tags: ['layer2', 'satellite', 'satellite_cert'], mode: create }
#   - { role: layer2_satellite_certificate, tags: ['layer2', 'satellite', 'satellite_cert'], mode: create }

# - hosts: ipa
#   remote_user: root
#   gather_facts: false
#   roles:
#     - { role: layer2_rhel, tags: [ 'layer2', 'ipa', 'satellite_cert' ], mode: refreshcert }

# - hosts: test-rhel
#   remote_user: root
#   gather_facts: false
#   roles:
#     - { role: layer2_vms, tags: [ 'layer2', 'test-rhel', 'vm' ], mode: create }
#    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'satellite', 'test-rhel', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
#    - { role: layer2_tdagent, tags: [ 'layer2', 'satellite', 'test-rhel', 'tdagent' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }


#### Infrastructure (DNS, SMTP/IMAP) ####

- hosts: infrastructure
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'infrastructure', 'vm' ], mode: create }
    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'infrastructure', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
    - { role: layer2_rhel, tags: [ 'layer2', 'infrastructure', 'rhel' ], mode: create }
    - { role: layer2_infrastructure, tags: [ 'layer2', 'infrastructure' ], mode: create }
    - { role: layer2_tdagent, tags: [ 'layer2', 'tdagent', 'infrastructure'], mode: create }

#### VIRT-WHO host (either infrastrcture or satellite)

- hosts: virt-who
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_virtwho, tags: [ 'layer2', 'virtwho' ], mode: create }


#### CEPH

- hosts: ceph
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'ceph', 'vm' ], mode: create }
    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'ceph', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
    - { role: layer2_rhel, tags: [ 'layer2', 'ceph', 'rhel' ], mode: create }
    - { role: layerX_distribute_pubkey, tags: [ 'layer2', 'ceph', 'ceph-installprep' ], mode: create, pubkeyhost: ceph0 }

- hosts: ceph-installer
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_ceph_installer, tags: [ 'layer2', 'ceph', 'ceph-install', 'ceph-installer' ], mode: create }

- hosts: ceph-calamari
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_ceph_calamari, tags: [ 'layer2', 'ceph', 'ceph-install', 'ceph-calamari' ], mode: create }

- hosts: ceph-rgws-installer
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_ceph_rgw_installer, tags: [ 'layer2', 'ceph', 'ceph-install', 'ceph-rgws' ], mode: create }

# - hosts: storage-console
#   remote_user: root
#   gather_facts: false
#   roles:
#     - { role: layer2_vms, tags: [ 'layer2', 'storage-console', 'vm' ], mode: create }
#     - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'storage-console', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
#     - { role: layer2_rhel, tags: [ 'layer2', 'storage-console', 'rhel' ], mode: create }
#     - { role: layer2_ipa_certificate, tags: ['layer2', 'storage-console', 'cert' ], mode: create }
#     - { role: layer2_storageconsole, tags: [ 'layer2', 'storage-console', 'storage-console-install' ], mode: create }

#### RH-SSO
# ansible-playbook -i hosts -e @config/infrastructure_config.yml -e @config/hailstorm_config.yml -e @config/storm3.coe.muc.redhat.com.yml create-01-base.yml --tags rh-sso
- hosts: rh-sso
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'rhsso', 'vm' ], mode: create }
    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'rhsso', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
    - { role: layer2_rhel, tags: [ 'layer2', 'rhsso', 'rhel' ], mode: create }
    - { role: layerX_ipa_client, tags: [ 'layer2', 'rhsso',  'ipa-client'], mode: create }
    - { role: layer2_ipa_certificate, tags: ['layer2', 'rhsso', 'rhsso-cert'], mode: create, certcn: 'rh-sso.{{ hailstorm_dns_domain }}', factprefix: rhsso }
    - { role: layer2_rhsso, tags: [ 'layer2', 'rhsso' ], mode: create }

#### install-host
# ansible-playbook -i hosts -e @config/infrastructure_config.yml -e @config/hailstorm_config.yml -e @config/storm3.coe.muc.redhat.com.yml create-01-base.yml --tags install-host
- hosts: install-host
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'install-host', 'vm' ], mode: create }
    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'install-host', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
    - { role: layer2_rhel, tags: [ 'layer2', 'install-host', 'rhel' ], mode: create }
    - { role: layerX_ipa_client, tags: [ 'layer2', 'install-host',  'ipa-client'], mode: create }
    - { role: layer2_installhost, tags: [ 'layer2', 'install-host' ], mode: create }

# create the "nuage" VMs, subscribe against satellite,
# install packages defined in groups/newgroup.yml and
# register IPA client
# ansible-playbook -i hosts -e @config/infrastructure_config.yml -e @config/hailstorm_config.yml -e @config/storm3.coe.muc.redhat.com.yml create-01-base.yml --tags nuage
- hosts: nuage
  remote_user: root
  gather_facts: false
  roles:
    - role: layer2_vms
      tags: [ 'layer2', 'nuage', 'vm' ]
      mode: create
    - role: layer2_rhel_reconfigure_dns
      tags: [ 'layer2', 'nuage', 'dns' ]
      mode: create
      nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}"
    - role: layer2_rhel
      tags: [ 'layer2', 'nuage', 'rhel' ]
      mode: create
    - role: layerX_ipa_client
      tags: [ 'layer2', 'nuage',  'ipa-client']
      mode: create
