---
- hosts: all
  remote_user: root
  gather_facts: false
  tasks:
    - set_fact:
        rhsm_username: "{{ rhsm_username }}"
        rhsm_password: "{{ rhsm_password }}"
      tags:
        - always
    - debug: var=vm_nics
      tags:
        - always
    # - debug: msg={{ vm_nics }}
    #   tags:
    #     - always

  vars_prompt:
    - name: "rhsm_username"
      prompt: "what is your Red Hat Subscription Manager username?"
      default: "wrichter"
      private: no
    - name: "rhsm_password"
      prompt: "what is your Red Hat Subscription Manager password?"
      private: yes

# - hosts: cloudforms-osp
#   remote_user: root
#   gather_facts: false
#   # DONE: this is ugly as we first have to look for running OSP and running CFME, before we should continue here to avoid unneeded --skip-tags and --tags
#   tasks:
#     - name: check if openstack is available
#       shell: curl -k {% if current_lifecycle_env.osp_use_tls %}https{% else %}http{% endif %}://{{ hostvars['openstack'].vm_nics[0].ip }}/ || true
#       register: openstack_available
#       changed_when: false
#       delegate_to: "{{ infrastructure_delegate_host_used_to_test_if_layer2_host_is_available }}"
#       tags:
#         - cfme_on_osp
#     - block:
#         - include: roles/layer3_vm_on_openstack/tasks/set_floating_ip_as_fact.yml
#         - include: roles/layer3_vm_on_openstack/tasks/set_vm_nics_facts.yml
#         - debug: var=vm_nics
#       when: openstack_available.stdout|length > 0

- hosts: layer1
  remote_user: root
  gather_facts: false
  pre_tasks:
    - setup:
      tags: [ 'layer1', 'rhosp', 'rhev', 'ose3', 'dnat', 'layer1-dnat' ]
  roles:
    - role: layer1
      tags: [ 'layer1' ]
      mode: create
    - role: layer1_dnat
      tags: [ 'layer1', 'dnat', 'layer1-dnat' ]
      mode: create
      when: infrastructure_network_master is not defined or infrastructure_network_master == layer1_ansible_host
    - role: layer1_etc_hosts
      mode: create
      tags: [ 'layer1', 'layer1-etc-hosts' ]
    - role: layer1_ceph_inventory
      tags: [ 'layer2', 'ceph', 'ipa' ]
      when: current_lifecycle_env.osp_storage_backend == "ceph_ownvms"
    - role: layer1_nuage
      mode: create
      tags: [ 'layer1', 'nuage' ]
#### SATELLITE ####

- hosts: satellite
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'satellite', 'vm', 'satellite-vm' ], mode: create }
    - { role: layer2_rhel, tags: [ 'layer2','satellite', 'rhel','satellite-rhel' ], mode: create }
    - { role: layer2_satellite, tags: [ 'layer2','satellite' ], mode: create }

#### IPA ####

- hosts: ipa
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'ipa', 'vm', 'ipa-vm' ], mode: create }
    - { role: layer2_ipa_etc_hosts, tags: [ 'layer2', 'ipa', 'rhel', 'ipa-rhel' ], mode: create }
    - { role: layer2_rhel, tags: [ 'layer2', 'ipa', 'rhel', 'ipa-rhel' ], mode: create }
    - { role: layer2_ipa_etc_hosts, tags: [ 'layer2', 'ipa', 'rhel', 'ipa-rhel' ], mode: destroy }
    - { role: layer2_ipa_openssl_ca, tags: [ 'layer2', 'ipa', 'ca', 'rootca' ], mode: create, ca_name: "rootca" }
    - { role: layer2_ipa_openssl_ca, tags: [ 'layer2', 'ipa', 'ca', 'alienca' ], mode: create, ca_name: "alienca" }
# DFR: Preparation for HSRACKDEV-358 Constant Root CA - work in progress currently disabled:
#    - { role: layer2_ipa, tags: [ 'layer2', 'ipa' ], mode: create-csr }
#    - { role: layer2_ipa_openssl_ca, tags: [ 'layer2', 'ipa', 'rootca' ], mode: signcertreq, csr_name: "ipa",csr_req: "???" , factprefix: ipaCert  }
#    - { role: layer2_ipa, tags: [ 'layer2', 'ipa' ], mode: create }
    - { role: layer2_ipa, tags: [ 'layer2', 'ipa' ], mode: create }
    - { role: layer2_tdagent, tags: [ 'layer2', 'ipa', 'tdagent', 'ipa-tdagent'], mode: create }

#### SATELLITE (again) ####

- hosts: satellite
  remote_user: root
  gather_facts: false
  #pre_tasks:
  #  - setup:
  #    tags: [ 'layer2','satellite' ]
  roles:
   - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'satellite', 'dns', 'satellite-dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
#   - { role: layer2_tdagent, tags: [ 'layer2', 'satellite', 'tdagent', 'satellite-tdagent' ], mode: create }
#   - { role: layer2_ipa_certificate, tags: ['layer2', 'satellite', 'satellite_cert'], mode: create }
#   - { role: layer2_satellite_certificate, tags: ['layer2', 'satellite', 'satellite_cert'], mode: create }

# - hosts: ipa
#   remote_user: root
#   gather_facts: false
#   roles:
#     - { role: layer2_rhel, tags: [ 'layer2', 'ipa', 'satellite_cert' ], mode: refreshcert }

#### install-host
# ansible-playbook -i hosts -e @config/infrastructure_config.yml -e @config/hailstorm_config.yml -e @config/storm3.coe.muc.redhat.com.yml create-01-base.yml --tags install-host
- hosts: install-host
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'install-host', 'vm' ], mode: create }
    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'install-host', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
    - { role: layer2_rhel, tags: [ 'layer2', 'install-host', 'rhel' ], mode: create }
    - { role: layerX_ipa_client, tags: [ 'layer2', 'install-host',  'ipa-client' ], mode: create }
    - { role: layer2_installhost, tags: [ 'layer2', 'install-host' ], mode: create }
    - { role: layerX_distribute_proxycert, tags: [ 'layer2', 'install-host', 'proxy-cert' ], mode: create }

#### Infrastructure (DNS, SMTP/IMAP) ####

- hosts: infrastructure-group
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'infrastructure', 'vm' ], mode: create }
    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'infrastructure', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
    - { role: layer2_rhel, tags: [ 'layer2', 'infrastructure', 'rhel' ], mode: create }
    - { role: layer2_dnat_dns, tags: [ 'layer2', 'infrastructure', 'dnat' ], mode: create, when: '"dnat" in hostvars[inventory_hostname_short].roles'  }
    - { role: layer2_smtp_imap, tags: [ 'layer2', 'infrastructure', 'smtp'], mode: create, when: '"smtp" in hostvars[inventory_hostname_short].roles' }
    - { role: layer2_ntp, tags: [ 'layer2', 'infrastructure', 'ntp'], mode: create, when: '"ntp" in hostvars[inventory_hostname_short].roles' }
    - { role: layer2_syslog, tags: [ 'layer2', 'infrastructure', 'syslog'], mode: create, when: '"syslog" in hostvars[inventory_hostname_short].roles' }
    - { role: layer2_tdagent, tags: [ 'layer2', 'tdagent', 'infrastructure'], mode: create }
    - { role: layer2_haproxy_service, tags: [ 'haproxy_setup' ], mode: create,  when: '"haproxy" in hostvars[inventory_hostname_short].roles' }


#### VIRT-WHO host (either infrastrcture or satellite)

- hosts: virt-who
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_virtwho, tags: [ 'layer2', 'virtwho' ], mode: create }

#### BOSCH VPN Client

- hosts: bosch-vpn-group
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'bosch-vpn', 'vm'], mode: create }
    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'bosch-vpn', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
    - { role: layer2_rhel, tags: [ 'layer2', 'bosch-vpn', 'rhel' ], mode: create }
    - { role: layer2_cisco_anyconnect_client, tags: [ 'layer2', 'bosch-vpn', 'anyconnect' ], mode: create }



#### CEPH

- hosts: ceph
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'ceph', 'vm' ], mode: create }
    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'ceph', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
    - { role: layer2_rhel, tags: [ 'layer2', 'ceph', 'rhel' ], mode: create }
    - { role: layerX_distribute_pubkey, tags: [ 'layer2', 'ceph', 'ceph-installprep' ], mode: create, pubkeyhost: ceph0 }

- hosts: ceph-installer
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_ceph_installer, tags: [ 'layer2', 'ceph', 'ceph-install', 'ceph-installer' ], mode: create }

- hosts: ceph-calamari
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_ceph_calamari, tags: [ 'layer2', 'ceph', 'ceph-install', 'ceph-calamari' ], mode: create }

- hosts: ceph-rgws-installer
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_ceph_rgw_installer, tags: [ 'layer2', 'ceph', 'ceph-install', 'ceph-rgws' ], mode: create }

# - hosts: storage-console
#   remote_user: root
#   gather_facts: false
#   roles:
#     - { role: layer2_vms, tags: [ 'layer2', 'storage-console', 'vm' ], mode: create }
#     - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'storage-console', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
#     - { role: layer2_rhel, tags: [ 'layer2', 'storage-console', 'rhel' ], mode: create }
#     - { role: layer2_ipa_certificate, tags: ['layer2', 'storage-console', 'cert' ], mode: create }
#     - { role: layer2_storageconsole, tags: [ 'layer2', 'storage-console', 'storage-console-install' ], mode: create }

#### RH-SSO
# ansible-playbook -i hosts -e @config/infrastructure_config.yml -e @config/hailstorm_config.yml -e @config/storm3.coe.muc.redhat.com.yml create-01-base.yml --tags rh-sso
- hosts: rh-sso
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'rhsso', 'vm' ], mode: create }
    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'rhsso', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
    - { role: layer2_rhel, tags: [ 'layer2', 'rhsso', 'rhel' ], mode: create }
    - { role: layerX_ipa_client, tags: [ 'layer2', 'rhsso',  'ipa-client'], mode: create }
    - { role: layer2_ipa_certificate, tags: ['layer2', 'rhsso', 'rhsso-cert', 'rhsso-install'], mode: create, certcn: 'sso.{{ hailstorm_dns_domain }}', factprefix: rhsso }
    - { role: layer2_rhsso, tags: [ 'layer2', 'rhsso', 'rhsso-install' ], mode: create }

# create the "nuage" VMs, subscribe against satellite,
# install packages defined in groups/newgroup.yml and
# register IPA client
# ansible-playbook -i hosts -e @config/infrastructure_config.yml -e @config/hailstorm_config.yml -e @config/storm3.coe.muc.redhat.com.yml create-01-base.yml --tags nuage
# - hosts: nuage
#   remote_user: root
#   gather_facts: false
#   roles:
#     - role: layer2_vms
#       tags: [ 'layer2', 'nuage', 'vm' ]
#       mode: create
#     - role: layer2_rhel_reconfigure_dns
#       tags: [ 'layer2', 'nuage', 'dns' ]
#       mode: create
#       nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}"
#     - role: layer2_rhel
#       tags: [ 'layer2', 'nuage', 'rhel' ]
#       mode: create
#     - role: layerX_ipa_client
#       tags: [ 'layer2', 'nuage',  'ipa-client']
#       mode: create

- hosts: proxy-group
  remote_user: root
  gather_facts: false
  roles:
     - { role: layer2_vms, tags: [ 'layer2', 'proxy', 'vm' ], mode: create }
     - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'proxy', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
     - { role: layer2_rhel, tags: [ 'layer2', 'proxy', 'rhel' ], mode: create }
     - { role: layerX_ipa_client, tags: [ 'layer2', 'proxy',  'ipa-client'], mode: create }
     - { role: layerX_syslog_client, tags: [ 'layer2', 'proxy', 'syslog',  'syslog-client'], mode: create }
     - { role: layer2_proxy, tags: [ 'layer2', 'proxy', 'proxy-config' ], mode: create }
