---
###
# See BUILD.md for details
###
# Attention: This requires ansible 2.2.1, so a virtual env is needed.
# 
# Paths
# Paths to find zipped (tar.gz) files and unzipped files (e.g. qcow2)
# Both are required to run the nuage_unzip role. nuage_unzipped_files_dir
# is required when one or more operation lists, below, are set to 'install'
# or 'upgrade'.
nuage_zipped_files_dir: "/home/{{ nuage_user }}/binaries"
nuage_unzipped_files_dir: "/home/{{ nuage_user }}/binaries-unpacked"
###
# Path to a public key file to be injected in to VSD,VNS Util, VCIN and VSTAT vms
# during deployment and corresponding private file to be used to connect to the
# components during deployment
# TODO: make user and ssh-keygen in Hailstorm for install-host
# TODO: is this also used to connect to Layer1 host?
user_ssh_pub_key: ~/.ssh/id_rsa.pub
user_ssh_priv_key: ~/.ssh/id_rsa
###
###
# Usernames
# remote_user names for ansible to execute as on the target server (hypervisor)
# and Ansible host. target_server_username is the remote_user for all hypervisors.
# ansible_sudo_username is the sudo user for local actions.
# # TODO: add nuage to sudoers in Hailstorm by e.g. echo "{{ nuage_user }} ALL=(root) NOPASSWD:ALL" | tee /etc/sudoers.d/{{ nuage_user }}
target_server_username: "root"
ansible_sudo_username: "root"
###
# VSD params
# vsd_sa_or_ha = ha for cluster, sa for standalone deployment
# TODO: we start with ha and switch to ha w/ haproxy if needed
vsd_sa_or_ha: ha
###
# VSD FQDN
# Use xmpp fqdn for clustered VSDs and the vsd fqdn for stand alone
# This variable must be populated for all the components except VRS deployment
# TODO: what will be the target domain name?
# TODO: we will include the Hailstorm env, so {{ hailstorm_dns_domain }} can be used...
vsd_fqdn_global: xmpp.{{ hailstorm_dns_domain }}
# vsd_operations_list = A list of the operations you intend for the VSD. The
# list could include 1 or more of the following:
# - install
# - upgrade
# - health
# - TBD
vsd_operations_list:
  - install
# myvsds is a collection of parameters for VSDs.
# One set of parameters is required for each VSD.
# kvm = libvirt via virt module of ansible
# mgmt_* = services network w GW
# TODO: add hosts to hosts_sddc and add variables here
myvsds:
  - { hostname: "{{ hostvars['vsd1'].inventory_hostname }}.{{ hailstorm_dns_domain }}",
       target_server_type: "kvm",
       target_server: "{{ layer1_ansible_host }}",
       mgmt_ip: "{{ hostvars['vsd1'].vm_nics[0].ip }}",
       mgmt_gateway: "{{ hostvars['vsd1'].vm_nics[0].default_gw }}",
       mgmt_netmask: "{{ hostvars['vsd1'].vm_nics[0].netmask }}" }
  - { hostname: "{{ hostvars['vsd2'].inventory_hostname }}.{{ hailstorm_dns_domain }}",
       target_server_type: "kvm",
       target_server: "{{ layer1_ansible_host }}",
       mgmt_ip: "{{ hostvars['vsd2'].vm_nics[0].ip }}",
       mgmt_gateway: "{{ hostvars['vsd2'].vm_nics[0].default_gw }}",
       mgmt_netmask: "{{ hostvars['vsd2'].vm_nics[0].netmask }}" }
  - { hostname: "{{ hostvars['vsd3'].inventory_hostname }}.{{ hailstorm_dns_domain }}",
       target_server_type: "kvm",
       target_server: "{{ layer1_ansible_host }}",
       mgmt_ip: "{{ hostvars['vsd3'].vm_nics[0].ip }}",
       mgmt_gateway: "{{ hostvars['vsd3'].vm_nics[0].default_gw }}",
       mgmt_netmask: "{{ hostvars['vsd3'].vm_nics[0].netmask }}" }
###
# VSC params
# vsc_operations_list = A list of the operations you intend for the VSC. The
# list could include 1 or more of the following:
# - install
# - upgrade
# - health
# - TBD
vsc_operations_list:
  - install
# myvscs is a collection of parameters for VSCs.
# One set of parameters is required for each VSC.
# Do not update {{ vsd_fqdn_global }} here as it reads from previous section
# 4 VSC -> normally 2, with OCP -> 4
# ctrl_* = tenant/guest nw
# system_ip = can be avoided? Jonas will check
# vsc_mgmt_static_route_list to reach VSD -> no need to change
# TODO: add hosts to hosts_sddc and add variables here
myvscs:
  - { hostname: "{{ hostvars['c1'].inventory_hostname }}.{{ hailstorm_dns_domain }}",
      target_server_type: "kvm",
      target_server: "{{ layer1_ansible_host }}",
      mgmt_ip: "{{ hostvars['c1'].vm_nics[0].ip }}",
      mgmt_gateway: "{{ hostvars['c1'].vm_nics[0].default_gw }}",
      mgmt_netmask_prefix: "{{ (hostvars['c1'].vm_nics[0].ip ~ '/' ~ hostvars['c1'].vm_nics[0].netmask) | ipaddr('prefix') }}",
      ctrl_ip: "{{ hostvars['c1'].vm_nics[1].ip }}",
      ctrl_netmask_prefix: "{{ (hostvars['c1'].vm_nics[1].ip ~ '/' ~ hostvars['c1'].vm_nics[1].netmask) | ipaddr('prefix') }}",
      vsd_fqdn: "{{ vsd_fqdn_global }}",
      system_ip: 1.1.1.1,
      xmpp_username: vsc1,
      vsc_mgmt_static_route_list: [ 0.0.0.0/1 ] }
  - { hostname: "{{ hostvars['c2'].inventory_hostname }}.{{ hailstorm_dns_domain }}",
      target_server_type: "kvm",
      target_server: "{{ layer1_ansible_host }}",
      mgmt_ip: "{{ hostvars['c2'].vm_nics[0].ip }}",
      mgmt_gateway: "{{ hostvars['c2'].vm_nics[0].default_gw }}",
      mgmt_netmask_prefix: "{{ (hostvars['c2'].vm_nics[0].ip ~ '/' ~ hostvars['c2'].vm_nics[0].netmask) | ipaddr('prefix') }}",
      ctrl_ip: "{{ hostvars['c2'].vm_nics[1].ip }}",
      ctrl_netmask_prefix: "{{ (hostvars['c2'].vm_nics[1].ip ~ '/' ~ hostvars['c2'].vm_nics[1].netmask) | ipaddr('prefix') }}",
      vsd_fqdn: "{{ vsd_fqdn_global }}",
      system_ip: 1.1.1.2,
      xmpp_username: vsc2,
      vsc_mgmt_static_route_list: [ 0.0.0.0/1 ] }
  - { hostname: "{{ hostvars['c3'].inventory_hostname }}.{{ hailstorm_dns_domain }}",
      target_server_type: "kvm",
      target_server: "{{ layer1_ansible_host }}",
      mgmt_ip: "{{ hostvars['c3'].vm_nics[0].ip }}",
      mgmt_gateway: "{{ hostvars['c3'].vm_nics[0].default_gw }}",
      mgmt_netmask_prefix: "{{ (hostvars['c3'].vm_nics[0].ip ~ '/' ~ hostvars['c3'].vm_nics[0].netmask) | ipaddr('prefix') }}",
      ctrl_ip: "{{ hostvars['c3'].vm_nics[1].ip }}",
      ctrl_netmask_prefix: "{{ (hostvars['c3'].vm_nics[1].ip ~ '/' ~ hostvars['c3'].vm_nics[1].netmask) | ipaddr('prefix') }}",
      vsd_fqdn: "{{ vsd_fqdn_global }}",
      system_ip: 1.1.1.3,
      xmpp_username: vsc3,
      vsc_mgmt_static_route_list: [ 0.0.0.0/1 ] }
  - { hostname: "{{ hostvars['c4'].inventory_hostname }}.{{ hailstorm_dns_domain }}",
      target_server_type: "kvm",
      target_server: "{{ layer1_ansible_host }}",
      mgmt_ip: "{{ hostvars['c4'].vm_nics[0].ip }}",
      mgmt_gateway: "{{ hostvars['c4'].vm_nics[0].default_gw }}",
      mgmt_netmask_prefix: "{{ (hostvars['c4'].vm_nics[0].ip ~ '/' ~ hostvars['c4'].vm_nics[0].netmask) | ipaddr('prefix') }}",
      ctrl_ip: "{{ hostvars['c4'].vm_nics[1].ip }}",
      ctrl_netmask_prefix: "{{ (hostvars['c4'].vm_nics[1].ip ~ '/' ~ hostvars['c4'].vm_nics[1].netmask) | ipaddr('prefix') }}",
      vsd_fqdn: "{{ vsd_fqdn_global }}",
      system_ip: 1.1.1.4,
      xmpp_username: vsc4,
      vsc_mgmt_static_route_list: [ 0.0.0.0/1 ] }
vsc_health_expected_bgp_admin_state: Up
vsc_health_expected_bgp_oper_state: Up
vsc_health_expected_xmpp_server_state: Functional
vsc_health_expected_num_host_vports: 0
vsc_health_expected_num_vm_vports: 0
vsc_health_expected_num_gateway_ports: 0
###
# Stats VM (ElasticSearch) params
# vstat_operations_list = A list of the operations you intend for the ES node. The
# list could include 1 or more of the following:
# - install
# - upgrade
# - health
# - TBD
# TODO: vstat_standalone probably deprecated - ask Jonas
vstat_standalone: False
vstat_sa_or_ha: ha
vstat_operations_list:
  - install
# myvstats is a collection of parameters for the VSTAT.
# One set of parameters is required for each VSTAT.
myvstats:
  - { hostname: "{{ hostvars['elastic1'].inventory_hostname }}.{{ hailstorm_dns_domain }}",
      target_server_type: "kvm",
      target_server: "{{ layer1_ansible_host }}",
      mgmt_ip: "{{ hostvars['elastic1'].vm_nics[0].ip }}",
      mgmt_gateway: "{{ hostvars['elastic1'].vm_nics[0].default_gw }}",
      mgmt_netmask: "{{ hostvars['elastic1'].vm_nics[0].netmask }}",
      vsd_fqdn: "{{ vsd_fqdn_global }}" }
  - { hostname: "{{ hostvars['elastic2'].inventory_hostname }}.{{ hailstorm_dns_domain }}",
      target_server_type: "kvm",
      target_server: "{{ layer1_ansible_host }}",
      mgmt_ip: "{{ hostvars['elastic2'].vm_nics[0].ip }}",
      mgmt_gateway: "{{ hostvars['elastic2'].vm_nics[0].default_gw }}",
      mgmt_netmask: "{{ hostvars['elastic2'].vm_nics[0].netmask }}",
      vsd_fqdn: "{{ vsd_fqdn_global }}" }
  - { hostname: "{{ hostvars['elastic3'].inventory_hostname }}.{{ hailstorm_dns_domain }}",
      target_server_type: "kvm",
      target_server: "{{ layer1_ansible_host }}",
      mgmt_ip: "{{ hostvars['elastic3'].vm_nics[0].ip }}",
      mgmt_gateway: "{{ hostvars['elastic3'].vm_nics[0].default_gw }}",
      mgmt_netmask: "{{ hostvars['elastic3'].vm_nics[0].netmask }}",
      vsd_fqdn: "{{ vsd_fqdn_global }}" }
###
# VSR params
# vsr_operations_list = A list of the operations you intend for the VSR. The
# list could include 1 or more of the following:
# - install
vsr_operations_list:
  - install
# myvsrs is a collection of parameters for the targets where VSR is to be deployed.
# One set of parameters is required for each set or group of VSR targets.
# mgmt_* - configuration of VSR bof interface
# ports - a list of VSR traffic ports (1/1/1, 1/1/2 and etc)
# license_file - absolute path to license file. Support zip and txt license file.
# deploy_cfg_file - absolute path to file with configuration for vsr-deploy role.
# TODO: add hosts to hosts_sddc and add variables here
# TODO: the system loopback (system_ip) has to be reachable by the compute nodes,
# TODO: so if will be needed to have a static route for them added, so that the VRS component on the computes can reach the VSRs
myvsrs:
  - { hostname: "{{ hostvars['r1'].inventory_hostname }}.{{ hailstorm_dns_domain }}",
      target_server_type: "kvm",
      target_server: "{{ layer1_ansible_host }}",
      mgmt_ip: "{{ hostvars['r1'].vm_nics[0].ip }}",
      mgmt_gateway: "{{ hostvars['r1'].vm_nics[0].default_gw }}",
      mgmt_netmask_prefix: "{{ (hostvars['r1'].vm_nics[0].ip ~ '/' ~ hostvars['r1'].vm_nics[0].netmask) | ipaddr('prefix') }}",
      mgmt_static_route_list: [ 0.0.0.0/1 ],
      mgmt_to_hv_bridge: "{{ hostvars['r1'].nic_attachments[0].bridge }}",
      ports_to_hv_bridges: {{ ports_to_hv_bridges_vsr1 }},
      license_file: '/home/{{ nuage_user }}/licenses/NOKIA_BOSCH_VSR_POC_LicenseKey_temp_until_31012017_Installation.zip',
      deploy_cfg_file: '/home/{{ nuage_user }}/vsr/config1.txt'}
  - { hostname: "{{ hostvars['r2'].inventory_hostname }}.{{ hailstorm_dns_domain }}",
      target_server_type: "kvm",
      target_server: "{{ layer1_ansible_host }}",
      mgmt_ip: "{{ hostvars['r2'].vm_nics[0].ip }}",
      mgmt_gateway: "{{ hostvars['r2'].vm_nics[0].default_gw }}",
      mgmt_netmask_prefix: "{{ (hostvars['r2'].vm_nics[0].ip ~ '/' ~ hostvars['r2'].vm_nics[0].netmask) | ipaddr('prefix') }}",
      mgmt_static_route_list: [ 0.0.0.0/1 ],
      mgmt_to_hv_bridge: "{{ hostvars['r2'].nic_attachments[0].bridge }}",
      ports_to_hv_bridges: {{ ports_to_hv_bridges_vsr2 }},
      license_file: '/home/{{ nuage_user }}/licenses/NOKIA_RED HAT_VSR_POC_LicenseKey_temp_until_31012017_Installation.zip',
      deploy_cfg_file: '/home/{{ nuage_user }}/vsr/config2.txt'}
###
# Ansible
# The IP addr or hostname of the Ansible host
# ansible_deployment_host = could be localhost or the install-host
ansible_deployment_host: "localhost"
###
# Hypervisor network bridges
# Network bridges required on the target server (hypervisor/kvm host) for VM deployment
# mgmt = services
# data = tenant (Hint: data and control are used vice versa in this env)
# access = external? has to be checked
# TODO: use Hailstorm variables, access can be ignored
mgmt_bridge: "services"
data_bridge: "tenant"
#access_bridge: "access"
###
# Hypervisor VM image file location
# Location to create VM images on KVM target servers
images_path: "/var/lib/libvirt/images/"
###
# Common Nuage params
# NTP configuration
# Note: Must be in dotted-decimal format
# here -> IPA or AD
ntp_server_list:
  - {{ hostvars['ipa'].vm_nics[0].ip }}
# DNS configuration
# here -> IPA or AD
# TODO: DNS-Entries and Service-Entries have to be figured out and handled separately
dns_server_list:
  - {{ hostvars['ipa'].vm_nics[0].ip }}
dns_domain: "{{ hailstorm_dns_domain }}"
###
# Misc. params
# TODO
timezone: Europe/Berlin
# VSD machines have to be registered to SAT? -> we will not do that to have a supported base
# Normally all RPMs come from Nuage and *not* from RHEL, so there are already YUM repo files
# that are using an external repo from Nuage... do we have to mirror that???
# For a PoC this might not be needed, but for proper usage we might want to implement that anyway.
yum_proxy: "NONE"
yum_update: no
yum_pin: no
###
