---
- hosts: localhost

  vars_files:
  - vars.yml

  tasks:

  # Add bastion as new ansible host
  - name: Add bastion to ansible inventory in memory
    add_host:
      name: "{{OCP_BASTION.0}}.{{OCP_DOMAIN}}"
      groups: OCP

- hosts: OCP

  vars:
    ansible_ssh_private_key_file: ./ocpkp
    ansible_ssh_user: cloud-user
    ansible_become: true

  vars_files:
  - vars.yml

  environment:
    ANSIBLE_HOST_KEY_CHECKING: False

  tasks:

  # Create nodes variables
  - set_fact:
      ALL_NODES: "{{ OCP_BASTION }} + {{ OCP_LB }} + {{ OCP_MASTERS }} + {{ OCP_INFRANODES }} + {{ OCP_APPNODES }}"
      OCP_NODES: "{{ OCP_MASTERS }} + {{ OCP_INFRANODES }} + {{ OCP_APPNODES }}"
      HA: "{{ True if (OCP_LB.0 is defined) else False}}"

  # Unregister OpenShift hosts
  - name: Unregister OpenShift hosts
    shell: ansible --private-key=/home/cloud-user/.ssh/id_rsa all -a 'subscription-manager unregister'
    ignore_errors: yes    

  - name: Unregister bastion host
    shell: subscription-manager unregister
    ignore_errors: yes    

- hosts: localhost
  vars_files:
  - vars.yml

  # Set environment variables
  vars:
    admin_tenant:
      OS_REGION_NAME: "{{REGION_NAME}}"  
      OS_AUTH_URL: "{{AUTH_URL}}"
      OS_TENANT_NAME: "{{ADMIN_PROJECT_NAME}}"
      OS_USERNAME: "{{AUTH_USERNAME}}"
      OS_PASSWORD: "{{AUTH_PASSWORD}}"
    openshift_tenant:
      OS_REGION_NAME: "{{REGION_NAME}}"  
      OS_AUTH_URL: "{{AUTH_URL}}"
      OS_TENANT_NAME: "{{TENANT_NAME}}"
      OS_USERNAME: "{{TENANT_USER}}"
      OS_PASSWORD: "{{TENANT_PWD}}"

  tasks:

  # Create nodes variables
  - set_fact:
      ALL_NODES: "{{ OCP_BASTION }} + {{ OCP_LB }} + {{ OCP_MASTERS }} + {{ OCP_INFRANODES }} + {{ OCP_APPNODES }}"
      OCP_NODES: "{{ OCP_MASTERS }} + {{ OCP_INFRANODES }} + {{ OCP_APPNODES }}"
      HA: "{{ True if (OCP_LB.0 is defined) else False}}" 

  - name: Get project ID
    shell: openstack project list --project openshift | grep "{{TENANT_NAME}}" | awk '{print $2}'
    register: projectlist
  
  - set_fact:
      PROJECTID: "{{projectlist.stdout}}"

  # Remove LB instance
  - name: Delete load balancer instance
    shell: openstack server delete "{{item}}.{{OCP_DOMAIN}}"
    with_items: "{{OCP_LB}}"
    when: OCP_LB.0 is defined
    environment: "{{openshift_tenant}}"
    ignore_errors: yes    
  
  # Remove bastion instance
  - name: Delete bastion instance
    shell: openstack server delete "{{item}}.{{OCP_DOMAIN}}"
    with_items: "{{OCP_BASTION}}"
    when: OCP_BASTION.0 is defined
    environment: "{{openshift_tenant}}"
    ignore_errors: yes    

  # Remove openshift instances and attach docker volumes
  - name: Delete OpenShift instances
    shell: openstack server delete "{{item}}.{{OCP_DOMAIN}}"
    ignore_errors: yes
    with_items: "{{OCP_NODES}}"
    when: OCP_NODES.0 is defined
    environment: "{{openshift_tenant}}"

  # Remove cinder docker volumes
  - name: Delete cinder docker volumes
    shell: openstack volume delete "{{item}}-docker"
    ignore_errors: yes        
    with_items: "{{OCP_NODES}}"
    environment: "{{openshift_tenant}}"

  # Remove dynamically provisioned volumes
  - name: Remove dynamic volumes
    shell: for vol in $(openstack volume list | grep kubernetes | awk '{print $2}'); do openstack volume delete $vol; done
    ignore_errors: yes
    environment: "{{openshift_tenant}}"

  # Remove security groups all_open and default for project OpenShift
  - name: Delete security groups
    shell: openstack security group list | grep all_open | grep "{{PROJECTID}}" | awk '{print $2}'
    environment: "{{admin_tenant}}" 
    register: all_open_sg
    ignore_errors: yes
  - shell: openstack security group delete "{{all_open_sg.stdout}}"
    environment: "{{admin_tenant}}" 
    ignore_errors: yes
  #- shell: openstack security group list | grep "{{PROJECTID}}" | awk '{print $2}'
  #  environment: "{{admin_tenant}}" 
  #  register: default_sg
  #  ignore_errors: yes
  #- shell: openstack security group delete "{{default_sg.stdout}}"
  #  environment: "{{admin_tenant}}" 
  #  ignore_errors: yes

  # Remove router subnet
  - shell: openstack router remove subnet "{{ OCP_ROUTER_NAME }}" "{{ OCP_SUBNET_NAME }}"
    ignore_errors: yes
    environment: "{{admin_tenant}}"   
  
  # Remove router for OpenShift network access to public network
  - shell: openstack router delete "{{ OCP_ROUTER_NAME }}" 
    ignore_errors: yes
    environment: "{{admin_tenant}}"        

  # Remove OpenShift network
  - shell: openstack network delete "{{ OCP_NETWORK_NAME }}"
    ignore_errors: yes
    environment: "{{admin_tenant}}"        

  # Remove subnet for public network
  #- shell: openstack subnet delete "{{ PUBLIC_SUBNET_NAME }}"
  #  ignore_errors: yes
  #  environment: "{{admin_tenant}}"    

  # Remove public network
  - shell: openstack network delete "{{ PUBLIC_NETWORK_NAME }}"  
    ignore_errors: yes
    environment: "{{admin_tenant}}"

  # Remove OpenShift project
  - shell: openstack project delete "{{TENANT_NAME}}"
    ignore_errors: yes
    environment: "{{admin_tenant}}"

  # Remove user
  - shell: openstack user delete "{{TENANT_USER}}"
    ignore_errors: yes
    environment: "{{admin_tenant}}"                

  # Remove flavors
  - shell: openstack flavor delete "{{ BASTION_FLAVOR_NAME }}"
    ignore_errors: yes
    environment: "{{admin_tenant}}"        
  - shell: openstack flavor delete "{{ LB_FLAVOR_NAME }}"
    ignore_errors: yes
    environment: "{{admin_tenant}}"        
  - shell: openstack flavor delete "{{ MASTER_FLAVOR_NAME }}"
    ignore_errors: yes
    environment: "{{admin_tenant}}"        
  - shell: openstack flavor delete "{{ INFRANODE_FLAVOR_NAME }}"
    ignore_errors: yes
    environment: "{{admin_tenant}}"        
  - shell: openstack flavor delete "{{ APPNODE_FLAVOR_NAME }}"  
    ignore_errors: yes
    environment: "{{admin_tenant}}"

  # Remove image
  - shell: openstack image delete "{{ RHEL_IMAGE_NAME }}"
    ignore_errors: yes
    environment: "{{admin_tenant}}"    

    # Remove cloudinit files
  - file: path=./cloudinit state=absent
  - file: path=./ocpkp state=absent
  - file: path=./ocpkp.pub state=absent



