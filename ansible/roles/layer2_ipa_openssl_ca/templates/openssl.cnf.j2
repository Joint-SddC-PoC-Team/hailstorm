# OpenSSL root CA configuration file.

{#
# variables to be set:
# - ca_dir: the directory path where the ca config is going to reside
# - cert_cn: common name for the certificate

#optional variables
# - ca_policy: either "policy_strict" (for root CA) or "policy_loose" (for intermediate CA, default)
# - cert_san: subjectAlternateNames (comma-separated list of DNS:dnsname or IP:ipaddress records)
# - key_bitsize: default 2048
# - key_md: default sha512
# - basefilename: the base file name that will be extended with .csr.pem, .key.pem, .cert.pem, .cnf
#}

[ ca ]
# `man ca`
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
dir               = {{ ca_dir }}
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand


# The root key and root certificate.
private_key       = $dir/private/{{ ca_name }}.key.pem
certificate       = $dir/certs/{{ ca_name }}.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = {{ ca_policy|default('policy_loose') }}
email_in_dn				= no
copy_extensions   = copy

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = optional
stateOrProvinceName     = optional
# DFR: Relaxing this for Hailstorm / Alien CA
#organizationName        = match
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = {{ key_bitsize|default('2048') }}
distinguished_name  = req_distinguished_name
string_mask         = utf8only

# SHA-1 is deprecated, so use SHA-2 instead.
default_md         = {{ key_md|default('sha256') }}
default_keyfile    = private/{{ basefilename }}.key.pem
prompt             = no
encrypt_key        = no

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

{% if cert_san is defined and cert_san|length > 0 %}
# extensions
req_extensions     = v3_req
{% endif %}

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
organizationName       = "{{ hailstorm_dns_domain|upper }}"        # O=
commonName             = "{{ cert_cn }}"            # CN=
emailAddress           = "webmaster@{{ hailstorm_dns_domain }}"  # CN/emailAddress=

{% if cert_san is defined and cert_san|length > 0 %}
# req_extensions
[ v3_req ]
# The subject alternative name extension allows various literal values to be
# included in the configuration file
# http://www.openssl.org/docs/apps/x509v3_config.html
#subjectAltName  = DNS:www.example.com,DNS:www2.example.com # multidomain certificate
subjectAltName = {{ cert_san }}
{% endif %}

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign
nsCertType = sslCA, emailCA, objCA
#subjectAltName         = email:copy
#issuerAltName          = issuer:copy

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
nsCertType = sslCA, emailCA, objCA
keyUsage = critical, digitalSignature, cRLSign, keyCertSign
#subjectAltName         = email:copy
#issuerAltName          = issuer:copy

[ usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection


[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always
default_md         = {{ key_md|default('sha256') }}


[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning
