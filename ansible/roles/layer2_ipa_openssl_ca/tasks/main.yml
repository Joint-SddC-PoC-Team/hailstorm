#https://jamielinux.com/docs/openssl-certificate-authority/create-the-root-pair.html

#
# Modes:
# create: create or setup  CAs using a constant key+cert from binary folder
#     needs ca_name to be set
# signcertreq: signs an existing cert request using the Hailstorm Root CA
# servercert: create a server cert using the Hailstorm Root CA
# alienservercert: creates a server cert using an Alien CA from
#

- block:
  - name: Setup constant CA {{ ca_name }}
    include: create_constant_ca.yml
  when: mode == "create"


# ------- mode=="signcertreq"-------
# Purpose: signs an existing cert request
# caller must set:
#   csr_name: with name of the request, e.g the name of the server for which this csr is for
#   csr_req: content of the cert request
# caller can set:
#   factprefix (default: "ssl").
# Returns:
#   <factprefix>_cert with the signed server cert
#   <factprefix>_cacert with the ca cert
- block:
    - name: copy csr to root ca
      copy: content="{{ csr_req }}" dest="/root/openssl_ca/rootca/csr/{{ csr_name }}.csr.pem"

    - include: sign_certificate_request.yml
      vars:
        ca_dir: /root/openssl_ca/rootca
        ca_name: rootca
        basefilename: "{{ csr_name }}"
        extension: server_cert
        days: 730
    - name: get cert
      shell: cat {{ item }}
      with_items:
        - "/root/openssl_ca/rootca/certs/{{ csr_name }}.cert.pem"
        - "/root/openssl_ca/rootca/certs/rootca.cert.pem"
      register: keydata
      changed_when: false
    - name: set cert + key as facts
      set_fact: {"{{ factprefix|default('ssl') }}_cert":"{{ keydata.results[0].stdout }}","{{ factprefix|default('ssl') }}_cacert":"{{ keydata.results[1].stdout }}"}
  delegate_to: ipa
  when: mode=="signcertreq"

# ------- mode=="servercert"-------
# Purpose: Creates a servercert using the hailstorm root ca
# caller must set:
#   cert_cn: CN of the server
#   cert_san: System Alternate Names of the server to be added to the cert_san
# caller can set:
#   factprefix (default: "ssl")
# TODO: Test and document results!
- block:
    # caller should set cert_cn and cert_san
    - include: create_signed_certificate.yml
      vars:
        ca_dir: /root/openssl_ca/rootca
        ca_name: rootca
        key_bitsize: 2048
        basefilename: "{{ cert_cn }}"
        extension: server_cert
        days: 730
    - name: get cert + key
      shell: cat {{ item }}
      with_items:
        - "/root/openssl_ca/rootca/certs/{{ cert_cn }}.cert.pem"
        - "/root/openssl_ca/rootca/private/{{ cert_cn }}.key.pem"
        - "/root/openssl_ca/rootca/certs/ca.cert.pem"
        - "/root/openssl_ca/rootca/certs/rootca.cert.pem"
      register: keydata
      changed_when: false
    - name: set cert + key as facts
      set_fact: {"{{ factprefix|default('ssl') }}_cert":"{{ keydata.results[0].stdout }}\n{{ keydata.results[2].stdout }}","{{ factprefix|default('ssl') }}_key":"{{ keydata.results[1].stdout }}","{{ factprefix|default('ssl') }}_cacert":"{{ keydata.results[3].stdout }}"}
  delegate_to: ipa
  when: mode=="servercert"

# ------- mode=="alienservercert"-------
# Purpose: Creates a servercert using an Alien Root CA (one that is not present on any hailstorm machine)
# caller must set:
#   cert_cn: CN of the server
#   cert_san: System Alternate Names of the server to be added to the cert_san
# caller can set:
#   factprefix (default: "ssl")
# Returns:
#   <factprefix>_cert: server cert, followed by ca cert
#   <factprefix>_key: private key for server cert
#   <factprefix>_cacert: just the ca cert
- block:
    # create server cert using alien ca:
    - include: create_signed_certificate.yml
      vars:
        ca_dir: /root/openssl_ca/alienca
        ca_name: alienca
        key_bitsize: 2048
        basefilename: "{{ cert_cn }}"
        extension: server_cert
        days: 730
    - name: get cert + key
      shell: cat {{ item }}
      with_items:
        - "/root/openssl_ca/alienca/certs/{{ cert_cn }}.cert.pem"
        - "/root/openssl_ca/alienca/private/{{ cert_cn }}.key.pem"
        - "/root/openssl_ca/alienca/certs/alienca.cert.pem"
        - "/root/openssl_ca/alienca/certs/alienca.cert.pem"
      register: keydata
      changed_when: false
    - name: set cert + key as facts
      set_fact: {"{{ factprefix|default('ssl') }}_cert":"{{ keydata.results[0].stdout }}\n{{ keydata.results[2].stdout }}","{{ factprefix|default('ssl') }}_key":"{{ keydata.results[1].stdout }}","{{ factprefix|default('ssl') }}_cacert":"{{ keydata.results[3].stdout }}"}
  delegate_to: ipa
  when: mode=="alienservercert"
