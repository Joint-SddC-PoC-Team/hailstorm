- name: check if instance already exists
  shell: >
    . ~/overcloudrc_v3_hailstorm &&
    OS_TENANT_NAME={{ osp_tenant }}
    OS_PROJECT_NAME={{ osp_tenant }}
    OS_PASSWORD={{ root_password }}
    openstack server list -f json --name {{ inventory_hostname_short }}
  register: instance_data
  failed_when: instance_data.stdout == ""
  changed_when: false
  become: yes
  become_user: "{{ hostvars['rhosp-director'].rhosp_stack_user }}"
  delegate_to: rhosp-director
#- debug: var=instance_data.stdout|from_json

- block:

  - name: get interfaces from the VM
    shell: 'ip addr show primary|grep "state"|cut -d: -f2|grep -v lo|sed -e "s/\ //"'
    register: nics
  - debug: var=nics

  - name: get mac addresses from the VM
    shell: 'ip addr show primary|grep "link/ether"|cut -d: -f1-6|grep -v lo|awk "{print \$2}"'
    register: macs
  - debug: var=macs

  - name: get default GW IP
    shell: 'ip r|grep "default via"|awk "{print \$3}"'
    register: gwip

  - name: save VMs IPs as facts in vm_nics
    # TODO: this is a little bit ugly as we assume a 24 bit netmask for the gw calculation... we should look at the subnets and figure this out and set it accordingly
    set_fact:
      vm_nics: "{{ vm_nics|default([]) + [ {'ip': (instance_data.stdout|from_json)[0]['Networks']|regex_replace('.*'+item.0+'=','')|regex_replace('[,;].*',''), 'prefix': '24', 'dev': item.1, 'mac': item.2, 'netname': item.0, 'default_gw': (gwip.stdout if item.1 == 'eth0' else (instance_data.stdout|from_json)[0]['Networks']|regex_replace('.*'+item.0+'=','')|regex_replace('[,;].*','')|regex_replace('(\\d+\\.\\d+\\.\\d+)\\.\\d+','\\1.1')) } ] }}"
    with_together: 
      - "{{ vm_networks }}"
      - "{{ nics.stdout_lines }}"
      - "{{ macs.stdout_lines }}"
    tags:
      - get_cloudforms-osp-vm_nics
  - debug: var=vm_nics
  
  when: vm_exists
