- name: check if openstack is reachable
  shell: curl -k {% if current_lifecycle_env.osp_use_tls %}https{% else %}http{% endif %}://{{ hostvars['openstack'].vm_nics[0].ip }}/ || true
  register: openstack_response
  changed_when: false
  delegate_to: "{{ infrastructure_delegate_host_used_to_test_if_layer2_host_is_available }}"

- block:
    - set_fact:
        os_auth_hailstorm:
          auth_url: "https://openstack.{{ hailstorm_dns_domain }}:13000/v3/"
          domain_name: hailstorm 
          user_domain_name: hailstorm 
          project_domain_name: hailstorm
          username: "admin"
          password: "{{ root_password }}"
    - set_fact:
        os_auth_hailstorm_{{ item|replace("-","_") }}:
          auth_url: "https://openstack.{{ hailstorm_dns_domain }}:13000/v3/"
          project_name: "{{ item }}"
          tenant_name: "{{ item }}"
          domain_name: hailstorm 
          user_domain_name: hailstorm 
          project_domain_name: hailstorm
          username: "admin"
          password: "{{ root_password }}"
      with_items:
        - "{{ osp_projects }}"
        - admin


    - block:
       - include: instantiate_vm.yml
       - include: allocate_floating_ip.yml
      when: mode=="create"

    - block:
       - include: set_floating_ip_as_fact.yml
      when: mode=="create" or mode=="readfacts"

    - block:
       - name: wait for vm to become available
         wait_for: host={{ ansible_host }} port=22 timeout=600
         delegate_to: "{{ override_wait_for_delegate_host|default(infrastructure_delegate_host_used_to_test_if_layer2_host_is_available) }}"
         when: vm_exists and (jump_host is not defined)
       - name: wait for vm to become available after jump host is available
         wait_for: host={{ ansible_host }} port=22 timeout=600
         delegate_to: "{{ override_wait_for_delegate_host|default(infrastructure_delegate_host_used_to_test_if_layer2_host_is_available) }}"
         when: vm_exists and (jump_host is defined)
       - include: add_volumes.yml
      when: mode=="create"

    # - block:
    #    - include: set_vm_nics_facts.yml
    #   when: mode=="create" or mode=="readfacts"
    #
    # - block:
    #    - include: add_interfaces.yml
    #      when: vm_exists and mode=="create"
    #    - name: wait for subscription to finish
    #      shell: subscription-manager status | awk '/^Overall Status/{ print $3 }'
    #      register: subscription_status
    #      until: subscription_status.stdout == 'Current' or subscription_status.stdout == 'Insufficient'
    #      failed_when: subscription_status.stdout == ''
    #      changed_when: false
    #      retries: 30
    #      delay: 20
    #      when: vm_exists
    #   when: mode=="create"

    - block:
#        - include: set_floating_ip_as_fact.yml
#        - include: remove_volumes.yml
#          when: vm_exists
#        - include: remove_floating_ip.yml
#          when: vm_exists
        - include: terminate_vm.yml
          when: vm_exists
      when: mode=="destroy"
  when: openstack_response.stdout|length > 0

- set_fact:
    vm_exists: false
  when: openstack_response.stdout|length == 0
