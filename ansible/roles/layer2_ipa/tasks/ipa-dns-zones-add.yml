- name: find existing dns zones 
  shell: echo "{{ ipa_admin_password }}" | ( kinit admin &&  ipa dnszone-find "{{ hailstorm_dns_domain }}" ) | grep "Zone name:" | cut -c 14-
  register: dns_records
  changed_when: false

# - name: add dns records
#   shell: "echo {% if hostvars[item].vm_nics is defined %}{% for _nic in hostvars[item].vm_nics %}{% if _nic.netname is defined and _nic.netname == 'services' and _nic.ip is defined %}{{ ipa_admin_password }} | kinit admin && ipa dnsrecord-add {{ hailstorm_dns_domain }} {{ hostvars[item].inventory_hostname_short }} --a-rec {{ _nic.ip }}{% endif %}{% endfor %}{% endif %}"
#   when: item != 'localhost' and hostvars[item].inventory_hostname_short is defined and hostvars[item].inventory_hostname_short not in dns_records.stdout_lines
#   with_items: "{{ groups.all }}"
#   ignore_errors: true
- set_fact: dnszones=[]
- set_fact: dnszones="{{ dnszones }} + ['{{ item.default_gw_host_prefix | ipaddr('revdns') | regex_replace('^\d+\.(.*)$', '\\1') }}']"
  with_items: "{{ infrastructure_networks }}"


- name: add dns zone records 
  shell: echo {{ ipa_admin_password }} | kinit admin && ipa dnszone-add {{ item }} 
  when: item not in dns_records.stdout_lines
  with_items: "{{ dnszones | unique }}"
  ignore_errors: true
