
- name: check existing projects
  shell: oc get projects | awk '{ print $1 }'
  register: projects
  changed_when: false

- name: Create logging project
  shell: oadm new-project logging --node-selector=""
  when: "'logging' not in projects.stdout_lines"

- name: Check if logging-deployer is already completed
  shell: oc get pod -l "app=logging-deployer-template" -n logging | grep "Completed"
  register: logging_deployer
  changed_when: false
  failed_when: false

- block:
    - name: Check existing service accounts
      shell: oc get serviceaccounts -n logging | awk '{ print $1 }'
      register: logging_sa
      changed_when: false

    - name: Create service accounts
      shell: oc new-app logging-deployer-account-template -n logging
      when: "'logging-deployer' not in logging_sa.stdout_lines"
      ignore_errors: true

    - name: Add oauth permissions to logging sa
      shell: oadm policy {{ item }}
      when: "'logging-deployer' not in logging_sa.stdout_lines"
      with_items:
        - add-cluster-role-to-user oauth-editor system:serviceaccount:logging:logging-deployer
        - add-scc-to-user privileged system:serviceaccount:logging:aggregated-logging-fluentd
        - add-cluster-role-to-user cluster-reader system:serviceaccount:logging:aggregated-logging-fluentd

    - name: check if logging-deployer configmap exists
      shell: oc get configmap logging-deployer -o yaml -n logging
      register: configmap
      changed_when: false
      failed_when: false

    - name: delete logging-deployer configmap
      shell: oc delete configmap logging-deployer -n logging
      when: (configmap.stdout | from_yaml).data is defined

    - name: create logging-deployer configmap
      shell: >
        oc create configmap logging-deployer -n logging
        --from-literal kibana-hostname=kibana.{{ ocp_apps_dns_domain }}
        --from-literal kibana-ops-hostname=kibana-ops.{{ ocp_apps_dns_domain }}
        --from-literal public-master-url=https://openshift.{{ hailstorm_dns_domain }}:8443/
        --from-literal es-cluster-size=1
        --from-literal es-instance-ram=8G
        --from-literal es-nodeselector="region=infra"
        --from-literal kibana-nodeselector="region=infra"
        --from-literal curator-nodeselector="region=infra"

    - name: get ose version
      shell: oc version | awk '/^oc/{ print substr($2,2,5) }'
      register: version_tag
      changed_when: false
    - debug: msg="{% if current_lifecycle_env.openshift_version >=3.4 %}v3.4{% else %}{{ version_tag.stdout }}{% endif %}"
    - name:  deploy logging-deployer-template
      command: >
        oc new-app logging-deployer-template -n logging
        --param IMAGE_PREFIX=registry.access.redhat.com/openshift3/
        --param MODE=install
        --param IMAGE_VERSION={% if current_lifecycle_env.openshift_version >= 3.4 %}v3.4{% else %}{{ version_tag.stdout }}{% endif %}

    - name: Wait for logging-deployer to complete
      shell: oc get pod -l "app=logging-deployer-template" -n logging
      register: logging_deployer1
      changed_when: false
      until: "'Completed' in logging_deployer1.stdout"
      retries: 30
      delay: 20
  when: logging_deployer.stdout == ""
