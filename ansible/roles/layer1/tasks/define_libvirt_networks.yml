# define networks
# - name: start default network to ensure host IP can be determined
#   virt_net: uri=qemu:///system name=default state=active
#   ignore_errors: true
- name: reread system facts
  setup:

# - name: delete networks that need to be reconfigured
#   virt_net: uri=qemu:///system name={{ item.netname }} command=destroy state=absent
#   when: (item.forward_mode|default('nat')!='bridge' or (hostvars[inventory_hostname]['ansible_' + item.bridge].ipv4) is defined) and hostvars[inventory_hostname]['ansible_' + item.bridge].ipv4.address != item.default_gw_host_prefix | ipaddr('address')
#   with_items: "{{ infrastructure_networks }}"

# - name: start firewalld to ensure the define networks command will not fail
#   service: name=firewalld state=started

# - debug: msg={{ lookup("template", "libvirt_network.xml.j2") }}
#   with_items: "{{ infrastructure_networks }}"
- name: define networks
  virt_net: uri=qemu:///system name={{ item.netname }} command=define state=present xml='{{ lookup("template", "libvirt_network.xml.j2") }}'
  with_items: "{{ infrastructure_networks }}"
- name: start networks
  virt_net: uri=qemu:///system name={{ item.netname }} state=active
  with_items: "{{ infrastructure_networks }}"
- name: set autostart networks
  virt_net: uri=qemu:///system name={{ item.netname }} autostart=yes
  with_items: "{{ infrastructure_networks }}"

- block:
    - set_fact:
        temp_master_network: "true"
    # - debug: msg={{ lookup("template", "libvirt_network.xml.j2") }}
    #   with_items: "{{ infrastructure_networks }}"

    - name: define master networks
      virt_net: uri=qemu:///system name=x{{ item.netname }} command=define state=present xml='{{ lookup("template", "libvirt_network.xml.j2") }}'
      when: item.forward_mode != 'bridge'
      with_items: "{{ infrastructure_networks }}"
    - name: start master networks
      virt_net: uri=qemu:///system name=x{{ item.netname }} state=active
      when: item.forward_mode != 'bridge'
      with_items: "{{ infrastructure_networks }}"
    - name: set autostart master networks
      virt_net: uri=qemu:///system name=x{{ item.netname }} autostart=yes
      when: item.forward_mode != 'bridge'
      with_items: "{{ infrastructure_networks }}"

    - name: create script to create veth pairs and link bridges
      template: src=link_networks.j2 dest=~/link_networks.sh mode=0744
    - name: create script to remove veth pairs and link bridges
      template: src=unlink_networks.j2 dest=~/unlink_networks.sh mode=0744
    - name: execute script to create veth pairs and link bridges
      shell: ~/link_networks.sh
  when: layer1_ansible_host == infrastructure_network_master
