# - name: get current connections
#   shell: nmcli con show | cut -c68- | awk '{ print $1 }'
#   register: current_connections
#   changed_when: false
#
# - name: create bridge
#   shell: nmcli con add type bridge con-name {{ infrastructure_network_guests.bridge }} ifname {{ infrastructure_network_guests.bridge }}
#   when: >
#     infrastructure_network_guests.forward_mode == "bridge"
#     and
#     infrastructure_network_guests.bridge not in current_connections.stdout_lines
#
# - name: list devices attached to bridge
#   shell: brctl show {{ infrastructure_network_guests.bridge }} | cut -f6- | sed "s/\t//g"
#   register: devices_in_bridge
#   changed_when: false
#
# - name: add external device to bridge
#   shell: nmcli con add type bridge-slave con-name {{ infrastructure_network_guests.bridge }}-{{ external_network_config.guest_network_bridging.layer1_dev }} ifname {{ external_network_config.guest_network_bridging.layer1_dev }} master {{ infrastructure_network_guests.bridge }}
#   when: >
#     infrastructure_network_guests.forward_mode == "bridge"
#     and
#     external_network_config.guest_network_bridging.layer1_dev not in devices_in_bridge.stdout_lines
#
# - name: activate bridge
#   command: nmcli con up {{ infrastructure_network_guests.bridge }}
#   when: infrastructure_network_guests.forward_mode == "bridge"

- name: check bridge devices
  shell: virsh iface-list --all | awk 'NR>2 {print $1}'
  changed_when: false
  register: temp_bridge_config

- name: backup device config if present (if not present errors will be ignored)
  copy: src="/etc/sysconfig/network-scripts/ifcfg-{{ node_bridge_config[item.netname].nic }}{% if item.vlan is defined%}.{{ item.vlan }}{% endif %}" dest="/etc/sysconfig/network-scripts/BACKUP-{{ node_bridge_config[item.netname].nic }}{% if item.vlan is defined%}.{{ item.vlan }}{% endif %}" force=no remote_src=true mode=644
  with_items: "{{ infrastructure_networks }}"
  when: >
    ((node_bridge_config|default({},true))[item.netname]|default({},true)).nic is defined
    and
    item.bridge not in temp_bridge_config.stdout_lines
  ignore_errors: true

- name: create bridge definition files
  template: src=libvirt_interface.xml.j2 dest=/tmp/iface-{{ item.bridge }}.xml
  with_items: "{{ infrastructure_networks }}"
  when: >
    ((node_bridge_config|default({},true))[item.netname]|default({},true)).nic is defined
    and
    item.bridge not in temp_bridge_config.stdout_lines
  register: temp_bridge_file

- name: create bridge from definition file
  shell: virsh iface-define --file /tmp/iface-{{ item.item.bridge }}.xml
  when: not item|skipped
  with_items: "{{ temp_bridge_file.results }}"

- name: add additional config to ifcfg files
  blockinfile: dest=/etc/sysconfig/network-scripts/ifcfg-{{ item.bridge }} block="{{ node_bridge_config[item.netname].additional }}"
  with_items: "{{ infrastructure_networks }}"
  when: >
    ((node_bridge_config|default({},true))[item.netname]|default({},true)).nic is defined
    and
    item.bridge not in temp_bridge_config.stdout_lines
    and
    ((node_bridge_config|default({},true))[item.netname]|default({},true)).additional is defined

- name: start bridge
  shell: virsh iface-start {{ item.item.bridge }}
  when: not item|skipped
  with_items: "{{ temp_bridge_file.results }}"
