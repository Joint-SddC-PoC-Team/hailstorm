- block:
    - name: unexclude atomic-openshift and docker
      shell: atomic-openshift-excluder unexclude
      when: current_lifecycle_env.openshift_version >= 3.4
    - name: install docker
      yum: name={{ ose3_additional_packages }} state=present
    - name: change docker options
      lineinfile: dest=/etc/sysconfig/docker line="OPTIONS='--selinux-enabled --insecure-registry 172.30.0.0/16'" state=present regexp="^OPTIONS=.*$"
#TODO: change docker storage config if necessary
    - name: configure docker storage
      shell: docker-storage-setup && touch /.docker-storage-is-setup  creates=/.docker-storage-is-setup
    - name: Block docker.io registry
      lineinfile:
        dest: /etc/containers/registries.conf
        insertafter: 'EOF'
        line: '{{item}}'
      with_items:
      - 'block_registries:'
      - '  - docker.io'
    - name: ensure docker is running
      service: name=docker state=started enabled=yes
    - name: allow NFS access from containers
      command: setsebool -P {{ item }} on
      with_items:
        - virt_use_nfs
        - virt_sandbox_use_nfs
    # - name: remove DNS2 config from ifcfg-eth0
    #   lineinfile: regexp="^DNS2=.*" state=absent dest=/etc/sysconfig/network-scripts/ifcfg-eth0

    - name: check docker daemon proxy settings
      shell: grep -E '{{ item.regexp }}' /etc/sysconfig/docker || true
      changed_when: false
      with_items:
        - line: HTTP_PROXY='{{ http_proxy.protocol }}://{% if http_proxy.username is defined %}{{ http_proxy.username }}{% if http_proxy.password is defined %}:{{ http_proxy.password }}{% endif %}{% endif %}@{{ http_proxy.proxyname }}{% if http_proxy.port is defined %}:{{ http_proxy.port }}{% endif %}'
          regexp: ^HTTP_PROXY=.*
        - line: HTTPS_PROXY='{{ http_proxy.protocol }}://{% if http_proxy.username is defined %}{{ http_proxy.username }}{% if http_proxy.password is defined %}:{{ http_proxy.password }}{% endif %}{% endif %}@{{ http_proxy.proxyname }}{% if http_proxy.port is defined %}:{{ http_proxy.port }}{% endif %}'
          regexp: ^HTTPS_PROXY=.*
        - line: NO_PROXY=.{{ hailstorm_dns_domain }}
          regexp: ^NO_PROXY=.*
      register: temp_docker_proxy_config

    - name: configure docker daemon proxy settings
      lineinfile: dest=/etc/sysconfig/docker line={{ item.item.line }} regexp={{ item.item.regexp }}
      with_items: '{{ temp_docker_proxy_config.results }}'
      when: item.stdout == ""
      register: temp_docker_new_proxy_config

    - name: restart docker
      service: name=docker state=restarted
      when: temp_docker_new_proxy_config|changed

  when: mode=="create"
