### IPA
- block:
    - name: check existing record for {{ item }}
      shell: echo {{ hostvars['ipa'].ipa_admin_password }} | kinit admin 2>/dev/null 1>/dev/null && ipa dnsrecord-show {{ hailstorm_dns_domain }} {{ item }}  | awk '/A record:/{print $3}'
      register: iparecord
      failed_when: iparecord.rc != 0 and 'DNS resource record not found' not in iparecord.stderr
      changed_when: false

    # TODO - IPA can return multiple IPs in the output, how to deal?
    - name: remove previous record for {{ item }}
      shell: echo {{ hostvars['ipa'].ipa_admin_password }} | kinit admin && ipa dnsrecord-del {{ hailstorm_dns_domain }} {{ item }} --a-rec={{ iparecord.stdout }}
      when: item != 'ipa' and iparecord.rc == 0 and iparecord.stdout != ip and iparecord.stdout != ''

    - name: create new record for {{ item }}
      shell: echo {{ hostvars['ipa'].ipa_admin_password }} | kinit admin && ipa dnsrecord-add {{ hailstorm_dns_domain }} {{ item }} --a-rec={{ ip }}
      register: iparecord2
      failed_when: iparecord2.rc != 0 and 'no modifications to be performed' not in iparecord2.stderr
      when: iparecord.rc != 0 or iparecord.stdout != ip
  delegate_to: ipa

- set_fact:
    temp_external_ip: "{{ (external_network_config.services_network_dnat.mapping|selectattr('expose_machine','match','^' + name + '$')|first).on_host_prefix|ipaddr('address') }}"
  when: mode=='update_services_network' and external_network_config is defined and external_network_config.services_network_dnat.mapping|selectattr('expose_machine','match','^' + name + '$')|list|length > 0


### DNAT DNS
- block:
    - name: add or change {{ item }} in zone db
      lineinfile:
        dest: "/etc/named/zones/master/db.{{ hailstorm_dns_domain }}"
        line: "{{ item }} 				IN      A       {{ temp_external_ip|default(ip) }}"
        regexp: "^{{ item|regex_escape }}\\s+.*"
      when: >
        mode != 'update_services_network' or
        (external_network_config is defined and
        external_network_config.services_network_dnat.mapping|selectattr('expose_machine','match','^' + name + '$')|list|length > 0)
      notify:
        - create serial
        - update serial
        - restart named
  when: not skip_dnat_dns|default(false,true)
  delegate_to: infrastructure


### AD DNS
# work around the problem that delegating to AD does not seem to pull the proper variables from the AD host
- set_fact:
    ansible_winrm_server_cert_validation: ignore
- name: test if AD is available for remote management
  shell: curl -k https://{{ (hostvars[groups['primary-ad-group'][0]].vm_nics|selectattr('netname','match',infrastructure_network_admin.netname)|first).ip }}:5986
  register: ad_available
  changed_when: false
  delegate_to: "{{ infrastructure_delegate_host_used_to_test_if_layer2_host_is_available }}"

- block:
    # - name: query A record in AD DNS
    #   set_fact: existing_a_record="{{ lookup('dig', hostname + ' @' + hostvars[groups['primary-ad-group'][0]].ansible_host) }}"
    - name: query A record in AD DNS
      win_shell: Get-DnsServerResourceRecord -ZoneName {{ hailstorm_dns_domain }} -Name {{ item }} -RRType A | %{$_.RecordData.IPv4Address.IPAddressToString}
      failed_when: false
      changed_when: false
      register: temp_existing_a_record

    - set_fact:
        existing_a_record: 'NXDOMAIN'
      when: temp_existing_a_record.rc != 0

    - set_fact:
        existing_a_record: "{{ temp_existing_a_record.stdout|trim() }}"
      when: temp_existing_a_record.rc == 0

    # - debug: var=item
    # - debug: var=existing_a_record

    - name: remove existing A record
      win_shell: Remove-DnsServerResourceRecord -ZoneName {{ hailstorm_dns_domain }} -Name {{ item }} -RRType A -Force
      when: existing_a_record != 'NXDOMAIN' and existing_a_record != temp_external_ip|default(ip)

    - name: create A record in AD DNS
      win_shell: Add-DNSServerResourceRecordA -ZoneName {{ hailstorm_dns_domain }} -Name {{ item }} -IPv4Address {{ temp_external_ip|default(ip) }}
      when: existing_a_record == 'NXDOMAIN' or existing_a_record != temp_external_ip|default(ip)

  when: ad_available.stdout != ''
  delegate_to: "{{groups['primary-ad-group'][0]}}"
