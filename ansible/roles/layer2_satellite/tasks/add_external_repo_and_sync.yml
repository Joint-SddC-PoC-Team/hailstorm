- name: get current list of GPG Keys
  shell: hammer --output json gpg list --organization "{{ organization }}"
  register: current_gpg_keys
  changed_when: false

- name: get current list of products
  shell: hammer --output json product list --organization "{{ organization }}"
  register: current_product_list
  changed_when: false

- name: get current list of repos
  shell: hammer --output json repository list --organization "{{ organization }}"
  register: current_repo_list
  changed_when: false

- name: download repo GPG key
  get_url:
    url: "{{ item.gpgkey_url }}"
    dest: "/tmp/{{ item.gpgkey_name }}"
    mode: 0400
  when: item.gpgkey_name not in (current_gpg_keys.stdout|from_json)|map(attribute="Name")
  with_items: "{{ satellite_external_repos }}"

- name: add repo GPG key
  shell: hammer gpg create --organization "{{ organization }}" --name "{{ item.gpgkey_name }}" --key "/tmp/{{ item.gpgkey_name }}"
  when: item.gpgkey_name not in (current_gpg_keys.stdout|from_json)|map(attribute="Name")
  with_items: "{{ satellite_external_repos }}"

- name: add new product group
  shell: hammer product create --name "{{ item.product_name }}" --organization "{{ organization }}"
  when: item.product_name not in (current_product_list.stdout|from_json)|map(attribute="Name")
  with_items: "{{ satellite_external_repos }}"

- name: add new repo
  shell: hammer repository create --name "{{ item.repo_name }}" --organization "{{ organization }}" --product "{{ item.product_name }}" --content-type yum --gpg-key {{item.gpgkey_name}} --publish-via-http true --url "{{ item.repository_url }}"
  when: item.repo_name not in (current_product_list.stdout|from_json)|map(attribute="Name")
  with_items: "{{ satellite_external_repos }}"

- name: start sync tasks for external repos
  command: 'hammer product synchronize --async --organization "{{ organization }}" --name "{{ item.product_name }}"'
  with_items: "{{ satellite_external_repos }}"
