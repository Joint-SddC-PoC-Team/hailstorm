- name: copy chrony configuration for RHEL7
  template: src=chrony.j2
     dest=/etc/chrony.conf
     owner=root
     group=root
     mode=0644
  register: chrony_conf

- name: ensure chrony service is started and enabled
  service:
   name: chronyd
   state: started
   enabled: yes

- name: ensure chrony is getting restarted if necessary
  service:
   name: chronyd
   state: restarted
  when: chrony_conf|changed

- block:
    - name: Configure Appliance as Master Database
      shell: >
        LC_CTYPE=
        appliance_console_cli
        --host={{ hostname }}
        --region=919
        --internal
        --password="{{ root_password }}"
        --key --force-key
        --dbdisk=/dev/vdb
        --tmpdisk=/dev/vdc
        --sshpassword="{{ root_password }}"
        creates=/var/www/miq/vmdb/log/appliance_console.log

    - name: wait for cfme web ui to become available
      wait_for: host="{{ ansible_host }}" port=443 timeout=600
      delegate_to: "{{ jump_host|default(infrastructure_delegate_host_used_to_test_if_layer2_host_is_available) }}"
  when: cf_type=="db"

- block:
    - name: Join appliance to the Master Region 919
      shell: >
        LC_CTYPE= appliance_console_cli
        --fetch-key=cloudforms-db01.{{ hailstorm_dns_domain }}
        --sshlogin=root
        --sshpassword="{{ root_password }}"
        --hostname=cloudforms-db01.{{ hailstorm_dns_domain }}
        --password="{{ root_password }}"
        creates=/var/www/miq/vmdb/log/appliance_console.log

    - name: wait for cfme web ui to become available
      wait_for: host="{{ ansible_host }}" port=443 timeout=600
      delegate_to: "{{ jump_host|default(infrastructure_delegate_host_used_to_test_if_layer2_host_is_available) }}"
  when: cf_type!="db"

- name: Create Zone
  command: "/var/www/miq/vmdb/bin/rails runner 'Zone.create(:name => \"{{cf_zone}}\", :description => \"{{ cf_zone }} Zone\")'"

- name: Move appliance to Zone
  command: "/var/www/miq/vmdb/bin/rails runner 'MiqServer.my_server.set_config(:server => {:zone => \"{{ cf_zone }}\"})'"

- block:
    - name: Set HTTP_Proxy settings for download OCP OpenSCAP definitions from Internet
      command: /var/www/miq/vmdb/bin/rails runner 'ExtManagementSystem.find_by_name("openshift.{{ hailstorm_dns_domain }}").custom_attributes.create(:section => "cluster_settings", :name => 'http_proxy', :value => "http://cloudforms:{{ (proxy_users|selectattr('name','match','cloudforms')|first).password }}@{{hostvars['proxy'].vm_nics[0].ip}}:3128")'

    - name: Set HTTPS_Proxy settings for download OCP OpenSCAP definitions from Internet
      command: /var/www/miq/vmdb/bin/rails runner 'ExtManagementSystem.find_by_name("openshift.{{ hailstorm_dns_domain }}").custom_attributes.create(:section => "cluster_settings", :name => 'https_proxy', :value => "https://cloudforms:{{ (proxy_users|selectattr('name','match','cloudforms')|first).password }}@{{hostvars['proxy'].vm_nics[0].ip}}:3128")'

    - name: Set NO_Proxy settings for download OCP OpenSCAP definitions from Internet
      command: /var/www/miq/vmdb/bin/rails runner 'ExtManagementSystem.find_by_name("openshift.{{ hailstorm_dns_domain }}").custom_attributes.create(:section => "cluster_settings", :name => 'no_proxy', :value => "")'

  when: cf_type=="wk-ocp"


- name: perform appliance IPA integration
  shell: >
    LC_CTYPE= appliance_console_cli
    --ipaserver {{ hostvars['ipa'].hostname }}
    --ipadomain {{ hailstorm_dns_domain}}
    --iparealm {{ hailstorm_dns_domain|upper }}
    --ipaprincipal admin
    --ipapassword "{{ root_password }}"
    creates=/etc/sssd/sssd.conf

- name: set internal admin password
  shell: cd /var/www/miq/vmdb && rails r "User.find_by_userid('admin').update_attributes(:password => '{{ root_password }}')"
  #https://access.redhat.com/solutions/801103
  #


