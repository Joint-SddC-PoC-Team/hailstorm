# Create an OSEv3 group that contains the masters and nodes groups
[OSEv3:children]
masters
etcd
nodes
lb

# Set variables common for all OSEv3 hosts
[OSEv3:vars]
# SSH user, this user should allow ssh based auth without requiring a password
ansible_ssh_user=root

# If ansible_ssh_user is not root, ansible_sudo must be set to true
#ansible_sudo=true

deployment_type=openshift-enterprise
osm_default_subdomain={{ ocp_apps_dns_domain }}
openshift_master_default_subdomain={{ ocp_apps_dns_domain }}
osm_default_node_selector="region=primary"

# uncomment the following to enable htpasswd authentication; defaults to DenyAllPasswordIdentityProvider
#openshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider', 'filename': '/etc/origin/master/htpasswd'}]


{% if ocpOidcClientSecret is defined and ocpOidcClientSecret != "" and ipa_available|success and certificate|success %}
{# ------ Hailstorm specific:
# If RH-SSO is available, we use the OICD Auth Provider
# elseif IPA is availe, we use the LDAP Auth Provider
# else we use AllowAll as fallback:
#}
openshift_master_identity_providers=[{'name':'oidc_rhsso', 'challenge':'false', 'login':'true', 'mappingMethod':'add', 'kind': 'OpenIDIdentityProvider', 'clientID': 'ocp-master', 'clientSecret':'{{ ocpOidcClientSecret }}', 'ca': 'ipa-ca.crt', 'urls': {'authorize': 'https://rh-sso.{{ hailstorm_dns_domain }}:8443/auth/realms/infra/protocol/openid-connect/auth', 'token':'https://rh-sso.{{ hailstorm_dns_domain }}:8443/auth/realms/infra/protocol/openid-connect/token', 'userInfo':'https://rh-sso.{{ hailstorm_dns_domain }}:8443/auth/realms/infra/protocol/openid-connect/userinfo'}, 'claims': { 'id':['sub'], 'preferredUsername':['preferred_username'], 'name':['name'], 'email':['email'] }}]
{# openshift_master_ldap_ca_file causes the file to be copied to all master nodes /etc/origin/master dirs #}
openshift_master_ldap_ca_file=/etc/origin/master/ipa-ca.crt
{% elif ipa_available|success and certificate|success %}
openshift_master_identity_providers=[{'name': 'ldap_ipa', 'challenge': 'true', 'login': 'true', 'kind': 'LDAPPasswordIdentityProvider', 'attributes': {'id': ['uid'], 'email': ['mail'], 'name': ['cn'], 'preferredUsername': ['uid']}, 'bindDN': 'uid=ose-bind-user,cn=users,cn=compat,dc={{ hailstorm_dns_domain | regex_replace('\.',',dc=') }}', 'bindPassword': '{{ root_password }}', 'ca': 'ipa-ca.crt', 'insecure': 'false', 'url': 'ldap://ipa.{{ hailstorm_dns_domain }}:389/cn=compat,dc={{ hailstorm_dns_domain | regex_replace('\.',',dc=') }}?uid?sub?(&(objectClass=posixAccount))'}]
# Configuring the ldap ca certificate
#openshift_master_ldap_ca='{#{ certificate.stdout }#}'
# or
openshift_master_ldap_ca_file=/etc/origin/master/ipa-ca.crt
{% else %}
openshift_master_identity_providers=[{'name': 'allow_all_auth', 'login': 'true', 'challenge': 'true', 'kind': 'AllowAllPasswordIdentityProvider' }]
{% endif %}

#openshift_use_dnsmasq=False
openshift_master_cluster_method=native
openshift_master_cluster_hostname=openshift.{{ hailstorm_dns_domain }}
openshift_master_cluster_public_hostname=openshift.{{ hailstorm_dns_domain }}
openshift_master_api_port=443
openshift_master_public_console_url=https://openshift.{{ hailstorm_dns_domain }}/console
openshift_master_logging_public_url=https://kibana.{{ ocp_apps_dns_domain }}
openshift_master_metrics_public_url=https://hawkular-metrics.{{ ocp_apps_dns_domain }}/hawkular/metrics

{% if openshift_key is defined %}
#openshift_master_named_certificates=[{"certfile": "/path/to/custom1.crt", "keyfile": "/path/to/custom1.key", "names": ["public-master-host.com"]}]
openshift_master_named_certificates=[{"certfile": "/root/openshift.crt", "keyfile": "/root/openshift.key", "cafile": "/root/openshift-ca.crt"}]
openshift_master_overwrite_named_certificates=true
{% endif %}

openshift_router_selector="region=infra"
openshift_hosted_router_selector="region=infra"
openshift_registry_selector="region=infra"
#openshift_docker_options="--log-opt max-size=1M --log-opt max-file=3"
os_sdn_network_plugin_name="redhat/openshift-ovs-multitenant"
#openshift_docker_additional_registries
#openshift_docker_insecure_registries
#openshift_master_overwrite_named_certificates=true

openshift_metrics_install_metrics=true
openshift_hosted_metrics_deploy=true
openshift_hosted_metrics_storage_kind=nfs
openshift_hosted_metrics_storage_access_modes=['ReadWriteOnce']
openshift_hosted_metrics_storage_host={{ infrastructure_address_nfs_server }}
openshift_hosted_metrics_storage_nfs_directory={{ nfs_ose3_pv_path }}
openshift_hosted_metrics_storage_volume_name=metrics
openshift_hosted_metrics_storage_volume_size=10Gi
openshift_metrics_hawkular_nodeselector={"region":"infra"}
openshift_metrics_cassandra_nodeselector={"region":"infra"}
openshift_metrics_heapster_nodeselector={"region":"infra"}

openshift_hosted_logging_deploy=true
# do not use NFS for logging since it is not supported - rely on the default empty volume being attached
#openshift_hosted_logging_storage_kind=nfs
#openshift_hosted_logging_storage_access_modes=['ReadWriteOnce']
#openshift_hosted_logging_storage_host={{ infrastructure_address_nfs_server }}
#openshift_hosted_logging_storage_nfs_directory={{ nfs_ose3_pv_path }}
#openshift_hosted_logging_storage_volume_name=logging
#openshift_hosted_logging_storage_volume_size=10Gi
openshift_logging_curator_nodeselector={"region":"infra"}
openshift_logging_kibana_nodeselector={"region":"infra"}
# do not set a nodeselector for fluentd: https://bugzilla.redhat.com/show_bug.cgi?id=1442281
#openshift_logging_fluentd_nodeselector={"region":"infra"}
openshift_logging_es_nodeselector={"region":"infra"}

# host group for masters
[masters]
{% for master in groups["ose3-master"] %}
{{ hostvars[master].hostname }}
{% endfor %}

[etcd]
{% for master in groups["ose3-master"] %}
{{ hostvars[master].hostname }}
{% endfor %}

# host group for nodes, includes region info
[nodes]
{% for master in groups["ose3-master"] %}
{{ hostvars[master].hostname }} openshift_node_labels="{{ hostvars[master].openshift_node_labels }}"
{% endfor %}
{% for node in groups["ose3-node"] %}
{{ hostvars[node].hostname }} openshift_node_labels="{{ hostvars[node].openshift_node_labels }}"
{% endfor %}

# Specify load balancer host
[lb]
{% for lb in groups["ose3-lb"] %}
{{ hostvars[lb].hostname }}
{% endfor %}
