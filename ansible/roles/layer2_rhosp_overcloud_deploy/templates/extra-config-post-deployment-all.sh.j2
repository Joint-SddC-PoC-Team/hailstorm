#!/bin/sh
set -x

function heat_control {
  # see https://access.redhat.com/solutions/2868471 and https://bugzilla.redhat.com/show_bug.cgi?id=1395139
  sudo crudini --set /etc/heat/heat.conf DEFAULT heat_metadata_server_url {% if current_lifecycle_env.osp_use_tls %}https{% else %}http{% endif %}://openstack.{{ hailstorm_dns_domain }}:{% if current_lifecycle_env.osp_use_tls %}13005{% else %}8000{% endif %}
  sudo crudini --set /etc/heat/heat.conf DEFAULT heat_waitcondition_server_url {% if current_lifecycle_env.osp_use_tls %}https{% else %}http{% endif %}://openstack.{{ hailstorm_dns_domain }}:{% if current_lifecycle_env.osp_use_tls %}13005{% else %}8000{% endif %}/v1/waitcondition
  #sudo crudini --set /etc/heat/heat.conf DEFAULT heat_watch_server_url {% if current_lifecycle_env.osp_use_tls %}https{% else %}http{% endif %}://openstack.{{ hailstorm_dns_domain }}:{% if current_lifecycle_env.osp_use_tls %}13005{% else %}8000{% endif %}

  # ensure that signaling is also NOT usign 127.0.0.1 - see https://bugs.launchpad.net/openstack-ansible/+bug/1459414
  sudo crudini --set /etc/heat/heat.conf clients_heat endpoint_type publicURL

  sudo systemctl restart openstack-heat-*
}

function nova_compute_control {
  # set keystone auth version
  sudo crudini --set /etc/nova/nova.conf keystone_authtoken auth_version v3

  {% if current_lifecycle_env.openstack_version < 10 %}
  # install optools fluentd
  yum install -y fluentd rubygem-fluent-plugin-add
  for user in {keystone,nova,neutron,cinder,glance}; do usermod -a -G $user fluentd; done
  cat <<EOF >/etc/fluentd/fluent.conf
{{ lookup('template','fluentd.conf.j2') }}
EOF

  chown nova:nova /var/log/nova
  chown cinder:cinder /var/log/cinder

  systemctl restart fluentd
  systemctl enable fluentd
  {% endif %}
}

function nova_control {
  # restart compute services
  sudo systemctl restart openstack-nova-api.service openstack-nova-cert.service openstack-nova-conductor.service openstack-nova-consoleauth.service openstack-nova-novncproxy.service openstack-nova-scheduler.service
}

function nova_compute {
  # modify VNC proxy config on compute nodes
  sudo crudini --set /etc/nova/nova.conf vnc novncproxy_base_url {% if current_lifecycle_env.osp_use_tls %}https://openstack.{{ hailstorm_dns_domain }}:13080/vnc_auto.html{% else %}http://openstack.{{ hailstorm_dns_domain }}:6080/vnc_auto.html{% endif %}
  sudo crudini --del /etc/nova/nova.conf DEFAULT novncproxy_base_url

{% if current_lifecycle_env.osp_storage_backend == "ceph_ownvms" %}
  sudo crudini --set /etc/nova/nova.conf libvirt hw_disk_discard unmap
{% endif %}
{# even if we're using Ceph, we want to mount /var/lib/nova via NFS, so the console log isn't lost #}
  # ensure that nova instance dir is mounted via NFS
  sudo setsebool -P virt_use_nfs 1
  sudo /bin/bash -c "grep -q /var/lib/nova/instances /etc/fstab || echo '{{ infrastructure_address_nfs_server }}:{{ nfs_rhosp_nova_path }}	/var/lib/nova/instances	nfs4	defaults,auto,_netdev 0 0' >>/etc/fstab"
  sudo mount -a

  #workaround https://access.redhat.com/solutions/2777871
  #sudo chcon -R --reference=/var/lib/nova /var/lib/nova/instances
  sudo setenforce 0
  sudo sed -i "s/^SELINUX=.*$/SELINUX=permissive/" /etc/selinux/config

  # restart compute service
  sudo systemctl condrestart openstack-nova-compute
}
{% if ipa_available|success %}

function cinder_control {
  sudo sed -i "s;:5000/v2;:5000/v3;g" /etc/cinder/cinder.conf
  sudo crudini --set /etc/cinder/cinder.conf keystone_authtoken auth_version v3
  sudo systemctl condrestart openstack-cinder-api
  sudo systemctl condrestart openstack-cinder-volume
}

function keystone_control {
  # create certs
  sudo cat <<EOF >/etc/ssl/certs/ca.crt
{{ certificate.results[0].stdout }}
EOF

  sudo cat <<EOF >/etc/pki/ca-trust/source/anchors/ca.pem
{{ certificate.results[1].stdout }}
EOF

  sudo update-ca-trust

  # allow ldap access
  sudo setsebool -P authlogin_nsswitch_use_ldap=on

  # adjust keystone config
  if [ ! -d /etc/keystone/domains/ ]; then
    sudo mkdir /etc/keystone/domains/ &&
    sudo chown keystone:keystone /etc/keystone/domains/;
  fi
  sudo crudini --set /etc/keystone/keystone.conf identity domain_specific_drivers_enabled true
  sudo crudini --set /etc/keystone/keystone.conf identity domain_config_dir /etc/keystone/domains
  sudo crudini --set /etc/keystone/keystone.conf assignment driver keystone.assignment.backends.sql.Assignment

  if [ ! -d /etc/openstack-dashboard/local_settings.d ]; then
  # Liberty & before
    sudo grep -q -E ^OPENSTACK_API_VERSIONS /etc/openstack-dashboard/local_settings ||
    sudo cat <<EOF >>/etc/openstack-dashboard/local_settings
OPENSTACK_API_VERSIONS = {
  "identity": 3
}
OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = False
OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = '{{ osp_domain_name }}'
EOF
  else
    # Mitaka & beyond
    sudo cat <<EOF >/etc/openstack-dashboard/local_settings.d/_99_hailstorm.py
OPENSTACK_API_VERSIONS = {
  "identity": 3
}
OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True
OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = '{{ osp_keystone_domais[0].keys()[0] }}'
EOF
  fi
{% for domain in osp_keystone_domais %}
  sudo cat <<EOF >/etc/keystone/domains/keystone.{{ domain.keys()[0] }}.conf
[ldap]
{% for config in domain[domain.keys()[0]].keys() %}
{{ config }} = {{ domain[domain.keys()[0]][config] }}
{% endfor %}
[identity]
driver = keystone.identity.backends.ldap.Identity
EOF
sudo chown keystone:keystone /etc/keystone/domains/keystone.{{ domain.keys()[0] }}.conf
{% endfor %}

  sudo systemctl condrestart openstack-keystone.service
}
{% endif %}

hostname | grep -q compute && ({% if ipa_available|success %}nova_compute_control ; {% endif %} nova_compute)
hostname | grep -q control && ({% if ipa_available|success %}keystone_control ; {% endif %} nova_compute_control ; cinder_control ; nova_control ; heat_control ; sudo systemctl restart httpd)

exit 0
